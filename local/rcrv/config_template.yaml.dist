###################
# Template to be used by build_cruise_definition to create loggers,
# modes and templates.
#
# Typical invocation would be
#
#   venv/bin/python local/rcrv/build_cruise_definition.py \
#     --template local/rcrv/config_template.yaml \
#     --host_path http://157.245.173.52:8000/api/ \
#     --destination /opt/openrvdas/local/rcrv/cruise.yaml \
#
# The idea is that a default set of configs is defined for every
# sensor that is not otherwise overridden by an explicit sensor-named
# declaration.

####################
# Cruise boilerplate
cruise:
  id: RCRV-Sample
  start: '2020-01-01'
  end: '2020-12-31'

####################
# By default, all loggers will have the configs defined under
# 'default'; this can be overridden by having the name of a sensor as
# a key along with the set of configs that it should have, as in the
# example below for gyro004.
loggers:
  default:  # Default set of configurations for a sensor
    configs:
    - 'off'        # 'off' is a yaml keyword, so needs to be quoted
    - stderr       # echo raw input to stderr
    - udp          # parse and rebroadcast to UDP
    - file/udp     # store raw to logfile, parse and rebroadcast to UDP
    - file/udp/db      # store raw to logfile, parse and store to db


  #gyro004:  # example of a non-default set of configs for a sensor
  #  configs:
  #  - 'off'
  #  - udp
  #  - file/udp/db

####################
# For each mode, what config should be run when OpenRVDAS is put in
# that mode. The _SENSOR_ID_ lines are wildcarded defaults: a matching
# entry will be added for each sensor discovered by CORIOLIX for every
# sensor that does not have a config explicitly defined.
modes:
  'off':
    default: 'off'

  monitor:
    default: udp
    #gyro004: 'off'  # example of non-default config for mode

  underway:
    default: file/udp/db

####################
default_mode: 'off'

####################
# Some globals that we're going to define for the configs. These will
# be swapped in wherever they appear in the config templates.
config_globals:
  _UDP_WRITE_PORT_: 6221
  _FILE_BASE_: /var/tmp/log/openrvdas

####################
# Templates for configs
configs_templates:
  # Template for logger off
  'off':
    name: _SENSOR_ID_->off

  # Template for writing raw output to stderr
  stderr:
    name: _SENSOR_ID_->stderr
    readers:
    - class: UDPReader
      kwargs:
        port: _UDP_PORT_
    writers:
    - class: TextFileWriter

  # Template for writing parsed output to stdout
  parsed:
    name: _SENSOR_ID_->parsed
    readers:
    - class: UDPReader
      kwargs:
        port: _UDP_PORT_
    transforms:
    - class: ParseTransform
      kwargs:
        record_format: '{timestamp:ti},{field_string:os}'
        field_patterns: _FIELD_PATTERNS_
    writers:
    - class: TextFileWriter

  # Template for parsing and rebroadcasting via UDP
  udp:
    name: _SENSOR_ID_->udp
    readers:
    - class: UDPReader
      kwargs:
        port: _UDP_PORT_
    transforms:
    - class: PrefixTransform
      kwargs:
        prefix: _SENSOR_ID_
    - class: ParseTransform
      kwargs:
        record_format: '{data_id:w} {timestamp:ti},{field_string:os}'
        field_patterns: _FIELD_PATTERNS_
    writers:
    - class: UDPWriter
      kwargs:
        port: _UDP_WRITE_PORT_

  # Template to store raw to logfile, parse and rebroadcast to UDP
  file/udp:
    name: _SENSOR_ID_->file/udp
    readers:
    - class: UDPReader
      kwargs:
        port: _UDP_PORT_
    writers:
    - class: LogfileWriter
      kwargs:
        filebase: _FILE_BASE_/_SENSOR_ID_/raw/_SENSOR_ID_
        split_char: ','
    - class: ComposedWriter
      kwargs:
        transforms:
        - class: PrefixTransform
          kwargs:
            prefix: _SENSOR_ID_
        - class: ParseTransform
          kwargs:
            record_format: '{data_id:w} {timestamp:ti},{field_string:os}'
            field_patterns: _FIELD_PATTERNS_
        writers:
        - class: UDPWriter
          kwargs:
            port: _UDP_WRITE_PORT_

  # Template to store raw to logfile, parse and rebroadcast to UDP
  file/udp/db:
    name: _SENSOR_ID_->file/udp/db
    readers:
    - class: UDPReader
      kwargs:
        port: _UDP_PORT_
    writers:
    - class: LogfileWriter
      kwargs:
        filebase: _FILE_BASE_/_SENSOR_ID_/raw/_SENSOR_ID_
        split_char: ','
    - class: ComposedWriter
      kwargs:
        transforms:
        - class: PrefixTransform
          kwargs:
            prefix: _SENSOR_ID_
        - class: ParseTransform
          kwargs:
            record_format: '{data_id:w} {timestamp:ti},{field_string:os}'
            field_patterns: _FIELD_PATTERNS_
        writers:
        - class: UDPWriter
          kwargs:
            port: _UDP_WRITE_PORT_
        - class: CORIOLIXWriter
          module: local.rcrv.modules.coriolix_writer
          kwargs: 
            data_table: _DATA_TABLE_
