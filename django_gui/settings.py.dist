"""
Django settings for openrvdas project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
STATIC_ROOT = BASE_DIR + '/static'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

# Where to look for static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "django_gui/static"),
    os.path.join(BASE_DIR, "display"),
    os.path.join(BASE_DIR, "docs"),
]

# What URL to use to serve static files
STATIC_URL = 'static/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'z40)h+9#4w(yj22z+(e@in@y7xoz6dgs&!nuc+atqmzpb%-0-!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

import socket  # noqa: E402

# If the system-defined hostname from gethostname(), below, is
# incorrect or unacceptable for some reason, comment it out and define
# your own hostname in its place.
HOSTNAME = socket.gethostname()

ALLOWED_HOSTS = [HOSTNAME, 'localhost']

# Host name may be a fully-qualified domain. Also allow just the basic
# name.
if '.' in HOSTNAME:
    name_pieces = HOSTNAME.split('.')
    ALLOWED_HOSTS.append(name_pieces[0])

# Try to get (at least one) machine IP address to add to ALLOWED_HOSTS
try:
    HOST_IP = socket.gethostbyname(HOSTNAME)
except socket.gaierror:
    HOST_IP = socket.gethostbyname('localhost')

if HOST_IP.find('127.0') != 0:
    ALLOWED_HOSTS.append(HOST_IP)
else:  # if we got 127.0.1.1, try an expensive way of getting HOST_IP
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ALLOWED_HOSTS.append(s.getsockname()[0])
        s.close()
    except OSError:
        pass  # failed to get interface

# Websocket we'll connect to for logger data updates. By default,
# we'll pass in an empty host, which will tell the client that it
# should figure things out for itself. In the case of a local Python
# program, it should use HOSTNAME; in the case of JS running on a
# client page, it should use the page's hostname (encoded in
# window.location.hostname).
#
# If, on the other hand, our data server is running somewhere else,
# specify it here.
WEBSOCKET_HOST = ''

# What port Django will serve on. Default is 8000 but can be changed
# during installation by utils/install_openrvdas.sh. NOTE: do not
# simply edit this value in settings.py without also modifying the
# value in django_gui/openrvdas_nginx.conf and display/js/widgets/settings.js
WEBSOCKET_PROTOCOL = 'ws'
WEBSOCKET_PORT = 80
WEBSOCKET_PATH = '/cds-ws'
WEBSOCKET_DATA_SERVER = f'{WEBSOCKET_PROTOCOL}://{WEBSOCKET_HOST}:{WEBSOCKET_PORT}{WEBSOCKET_PATH}'

# We'll allow the user to load cruise definition files from the
# server-side system, but restrict them to loading from these
# directories.
FILECHOOSER_DIRS = [BASE_DIR + '/local',
                    BASE_DIR + '/test']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_gui',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_gui.urls'

LOGIN_REDIRECT_URL = '../../'
LOGOUT_REDIRECT_URL = '../../'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_gui.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'CONN_MAX_AGE': 280,
    #     'NAME': 'openrvdas',
    #     'USER': 'rvdas',
    #     'PASSWORD': 'rvdas',
    #     'HOST': 'localhost',
    #     'PORT': '',
    # },
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },

    'OPTIONS': {
        'timeout': 20,
    },
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEFAULT_AUTO_FIELD='django.db.models.AutoField'

#DJANGO REST FRAMEWORK SETTINGS
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}